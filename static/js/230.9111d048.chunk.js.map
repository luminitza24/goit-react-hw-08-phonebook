{"version":3,"file":"static/js/230.9111d048.chunk.js","mappings":"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","sources":["redux/contacts/selector.js","components/form/Form.js","components/search/Search.js","components/list/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filters;\n","import Notiflix from 'notiflix';\nimport './Form.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const contactName = form.elements.name.value;\n    const contactNumber = form.elements.number.value;\n    const duplicate = contacts.items.find(\n      ({ name }) => name.toLowerCase() === contactName.toLowerCase()\n    );\n    if (duplicate) {\n      Notiflix.Notify.warning('Contact already exists!');\n    } else {\n      dispatch(addContact(contactName, contactNumber));\n    }\n    form.reset();\n  };\n\n  return (\n    <>\n    <div className='container'>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label className=\"label\">\n          {' '}\n          Name\n          <input\n            autoComplete=\"off\"\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\" className=\"label\">\n          {' '}\n          Number\n          <input\n            autoComplete=\"off\"\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className=\"button\">\n          {' '}\n          Add contact{' '}\n        </button>\n      </form>\n      </div>\n    </>\n  );\n};\n","import './Search.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilters } from 'redux/contacts/selector';\nimport { changeTextFilter } from 'redux/contacts/filterSlice';\nimport PropTypes from 'prop-types';\n\nexport const Search = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(selectFilters);\n\n  const handleFilterChange = evt => {\n    const name = evt.target.value;\n    dispatch(changeTextFilter(name));\n  };\n  return (\n    <>\n      <h3 className=\"info\">Find contacts by name</h3>\n      <label className=\"label\">\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          className=\"input\"\n          value={filters.textFilter}\n          onChange={handleFilterChange}\n        />\n      </label>\n    </>\n  );\n};\nSearch.propTypes = {\n  onChange: PropTypes.func,\n  filters: PropTypes.string,\n};\n","import './ContactList.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\nimport Notiflix from 'notiflix';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleDelete = id => dispatch(deleteContact(id));\n  const filterText = useSelector(state => state.filters.filterText);\n\n  const filteredContacts = contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(filterText.toLowerCase())\n  );\n\n  if (filteredContacts.length === 0) {\n    return Notiflix.Notify.failure('No contact was found please try again!');\n  }\n  const handleEdit = id => dispatch(editContact(id));\n  return (\n    <div className=\"contacts\">\n      <h1>Contacts</h1>\n      <ul className=\"contact-list\">\n        {filteredContacts.map(contact => (\n          <li key={contact.id} className=\"contact-item\">\n            {contact.name\n              .split(' ')\n              .map(n => n.charAt(0).toUpperCase() + n.slice(1))\n              .join(' ')}{' '}\n            : {contact.number}\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                handleDelete(contact.id);\n              }}\n            >\n              {' '}\n              Delete{' '}\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                handleEdit(contact.id);\n              }}\n            >\n              {' '}\n              Edit{' '}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconsole.log(ContactList);\n","import { Form } from '../components/form/Form';\nimport { selectContacts } from '../redux/contacts/selector';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectFilters } from '../redux/contacts/selector';\nimport { Search } from '../components/search/Search';\nimport { ContactList } from '../components/list/ContactList';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilters);\n\n  return (\n    <main className=\"contacts-main\">\n      <Form />\n      {contacts.length > 0 && <ContactList />}\n      {contacts.length > 1 && <Search />}\n      {filter && contacts.length === 0 && filter.length === 0 && (\n        <h3>Add contacts to be displayed</h3>\n      )}\n    </main>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilters","filters","Form","dispatch","useDispatch","useSelector","className","onSubmit","event","preventDefault","form","currentTarget","contactName","elements","name","value","contactNumber","number","items","find","toLowerCase","Notiflix","addContact","reset","autoComplete","type","pattern","title","required","htmlFor","Search","textFilter","onChange","evt","target","changeTextFilter","ContactList","filterText","filteredContacts","filter","contact","includes","length","map","split","n","charAt","toUpperCase","slice","join","onClick","id","deleteContact","editContact","console","log","useEffect","fetchContacts"],"sourceRoot":""}