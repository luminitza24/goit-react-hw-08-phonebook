{"version":3,"file":"static/js/490.85dd7d1e.chunk.js","mappings":"2OAMaA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAEvBC,GAAaF,EAAAA,EAAAA,KAAY,SAAAG,GAAK,OAAIA,EAAMC,QAAQF,UAAlB,IAE9BG,EAAmBN,EAASO,MAAMC,QAAO,SAAAC,GAAO,OACpDA,EAAQC,KAAKC,cAAcC,SAAST,EAAWQ,cADK,IAItD,GAAgC,IAA5BL,EAAiBO,OACnB,OAAOC,IAAAA,OAAAA,QAAwB,0CAGjC,OACE,iBAAKC,UAAU,WAAf,WACE,sCACF,eAAIA,UAAU,eAAd,SACGT,EAAiBU,KAAI,SAAAP,GAAO,OAC3B,gBAAqBM,UAAU,eAA/B,UACGN,EAAQC,KACNO,MAAM,KACND,KAAI,SAAAE,GAAC,OAAIA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,EAAxC,IACLC,KAAK,KAAM,IAJhB,KAKKb,EAAQc,QACX,oBACER,UAAU,SACVS,KAAK,SACLC,QAAS,WAzBE,IAAAC,IA0BIjB,EAAQiB,GA1BN5B,GAAS6B,EAAAA,EAAAA,IAAcD,GA2BvC,EALH,UAOG,IAPH,SAQS,QAET,oBACEX,UAAU,SACVS,KAAK,SACLC,QAAS,WAzBH,IAACC,IA0BMjB,EAAQiB,GA1BR5B,GAAS8B,EAAAA,EAAAA,IAAYF,GA2BjC,EALH,UAOG,IAPH,OAQM,SAxBCjB,EAAQiB,GADU,QAgClC,EAEDG,QAAQC,IAAIjC,E,6ICnDG,SAASkC,IACtB,IAAMjC,GAAWC,EAAAA,EAAAA,MACXiC,GAAY/B,EAAAA,EAAAA,IAAYgC,EAAAA,IAM9B,OAJAC,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,KAGF,iCACE,SAAC,IAAD,WACE,gDAEF,yBAAMkC,GAAa,4BACnB,SAAC,EAAAI,EAAD,MAGL,C,wGCxBM,IAAMlC,EAAiB,SAAAE,GAAK,OAAIA,EAAMJ,QAAV,EACtBiC,EAAkB,SAAA7B,GAAK,OAAIA,EAAMJ,SAASgC,SAAnB,EAGvBK,EAAgB,SAAAjC,GAAK,OAAIA,EAAMC,OAAV,C","sources":["components/list/ContactList.js","pages/Login.js","redux/contacts/selector.js"],"sourcesContent":["import './list.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\nimport Notiflix from 'notiflix';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleDelete = id => dispatch(deleteContact(id));\n  const filterText = useSelector(state => state.filters.filterText);\n\n  const filteredContacts = contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(filterText.toLowerCase())\n  );\n\n  if (filteredContacts.length === 0) {\n    return Notiflix.Notify.failure('No contact was found please try again!');\n  }\n const handleEdit=(id)=> dispatch(editContact(id));\n  return (\n    <div className='contacts'>\n      <h1>Contacts</h1>\n    <ul className=\"contact-list\">\n      {filteredContacts.map(contact => (\n        <li key={contact.id} className=\"contact-item\">\n          {contact.name\n            .split(' ')\n            .map(n => n.charAt(0).toUpperCase() + n.slice(1))\n            .join(' ')}{' '}\n          : {contact.number}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => {\n              handleDelete(contact.id);\n            }}\n          >\n            {' '}\n            Delete{' '}\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => {\n              handleEdit(contact.id);\n            }}\n          >\n            {' '}\n           Edit{' '}\n          </button>\n        </li>\n      ))}\n    </ul>\n    </div>\n  );\n};\n\nconsole.log(ContactList);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/list/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selector';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n","export const selectContacts = state => state.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filters;\n"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","selectContacts","filterText","state","filters","filteredContacts","items","filter","contact","name","toLowerCase","includes","length","Notiflix","className","map","split","n","charAt","toUpperCase","slice","join","number","type","onClick","id","deleteContact","editContact","console","log","Contacts","isLoading","selectIsLoading","useEffect","fetchContacts","C","selectFilters"],"sourceRoot":""}