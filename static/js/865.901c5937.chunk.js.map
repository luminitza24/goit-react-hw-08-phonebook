{"version":3,"file":"static/js/865.901c5937.chunk.js","mappings":"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","sources":["components/list/ContactList.js","components/form/Form.js","components/search/Search.js","pages/Contacts.js","redux/contacts/selector.js"],"sourcesContent":["import './list.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\nimport Notiflix from 'notiflix';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleDelete = id => dispatch(deleteContact(id));\n  const filterText = useSelector(state => state.filters.filterText);\n\n  const filteredContacts = contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(filterText.toLowerCase())\n  );\n\n  if (filteredContacts.length === 0) {\n    return Notiflix.Notify.failure('No contact was found please try again!');\n  }\n const handleEdit=(id)=> dispatch(editContact(id));\n  return (\n    <div className='contacts'>\n      <h1>Contacts</h1>\n    <ul className=\"contact-list\">\n      {filteredContacts.map(contact => (\n        <li key={contact.id} className=\"contact-item\">\n          {contact.name\n            .split(' ')\n            .map(n => n.charAt(0).toUpperCase() + n.slice(1))\n            .join(' ')}{' '}\n          : {contact.number}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => {\n              handleDelete(contact.id);\n            }}\n          >\n            {' '}\n            Delete{' '}\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => {\n              handleEdit(contact.id);\n            }}\n          >\n            {' '}\n           Edit{' '}\n          </button>\n        </li>\n      ))}\n    </ul>\n    </div>\n  );\n};\n\nconsole.log(ContactList);\n","import Notiflix from 'notiflix';\nimport './Form.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const contactName = form.elements.name.value;\n    const contactNumber = form.elements.number.value;\n    const duplicate = contacts.items.find(\n      ({ name }) => name.toLowerCase() === contactName.toLowerCase()\n    );\n    if (duplicate) {\n      Notiflix.Notify.warning('Contact already exists!');\n    } else {\n      dispatch(addContact(contactName, contactNumber));\n    }\n    form.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label className=\"label\">\n          {' '}\n          Name\n          <input\n            autoComplete=\"off\"\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\" className=\"label\">\n          {' '}\n          Number\n          <input\n            autoComplete=\"off\"\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className=\"button\">\n          {' '}\n          Add contact{' '}\n        </button>\n      </form>\n    </>\n  );\n};\n","import './Search.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilters } from 'redux/contacts/selector';\nimport { changeTextFilter } from 'redux/contacts/filterSlice';\n\nexport const Search = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(selectFilters);\n\n  const handleFilterChange = evt => {\n    const name = evt.target.value;\n    dispatch(changeTextFilter(name));\n  };\n  return (\n    <>\n      <h3 className=\"info\">Find contacts by name</h3>\n      <label className=\"filter\">\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          className=\"input\"\n          value={filters.textFilter}\n          onChange={handleFilterChange}\n        />\n      </label>\n    </>\n  );\n};\n","import { Form } from '../components/form/Form';\nimport { selectContacts } from '../redux/contacts/selector';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectFilters } from '../redux/contacts/selector';\nimport { Search } from '../components/search/Search';\nimport { ContactList } from '../components/list/ContactList';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilters);\n\n  return (\n    <main className=\"contacts-main\">\n      <Form />\n      {contacts.length > 0 && <ContactList />}\n      {contacts.length > 1 && <Search />}\n      {filter && contacts.length === 0 && filter.length === 0 && (\n        <h3>Add contacts to be displayed</h3>\n      )}\n    </main>\n  );\n};\nexport default Contacts;\n","export const selectContacts = state => state.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filters;\n"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","selectContacts","filterText","state","filters","filteredContacts","items","filter","contact","name","toLowerCase","includes","length","Notiflix","className","map","split","n","charAt","toUpperCase","slice","join","number","type","onClick","id","deleteContact","editContact","console","log","Form","onSubmit","event","preventDefault","form","currentTarget","contactName","elements","value","contactNumber","find","addContact","reset","autoComplete","pattern","title","required","htmlFor","Search","selectFilters","textFilter","onChange","evt","target","changeTextFilter","useEffect","fetchContacts","C","selectIsLoading","isLoading"],"sourceRoot":""}